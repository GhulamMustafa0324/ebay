// import { UserCircleIcon } from "@heroicons/react/24/solid";
// import {
//   MediaRenderer,
//   useBuyNow,
//   useContract,
//   useListing,
//   useNetwork,
//   useNetworkMismatch,
// } from "@thirdweb-dev/react";
// import { ListingType } from "@thirdweb-dev/sdk";
// import { useRouter } from "next/router";
// import React, { useEffect, useState } from "react";
// import Header from "../../components/Header";
// import Countdown from "react-countdown";
// import network from "../../utils/network";

// function ListingPage() {
//   const router = useRouter();
//   const { listingId } = router.query as { listingId: string };
//   const [, switchNetwork] = useNetwork();
//   const networkMismatch = useNetworkMismatch();

//   const [minimumNextBid, setMinimumNextBid] = useState<{
//     displayValue: string;
//     symbol: string;
//   }>();

//   const [bidAmount, setBidAmount] = useState("");

//   const { contract } = useContract(
//     process.env.NEXT_PUBLIC_MARKETPLACE_CONTRACT,
//     "marketplace"
//   );

//   const formatPlaceholder = () => {
//     if (!listing) return;

//     if (listing.type === ListingType.Direct) {
//       return "Enter Offer Amount";
//     }

//     if (listing.type === ListingType.Auction) {
//       return Number(minimumNextBid?.displayValue) === 0
//         ? "Enter Bid Amount"
//         : `${minimumNextBid?.displayValue} ${minimumNextBid?.symbol} or more`;
//     }
//   };

//   const { data: listing, isLoading, error } = useListing(contract, listingId);

//   useEffect(() => {
//     if (!listingId || !contract || !listing) return;

//     if (listing.type === ListingType.Auction) {
//       fetchMinNextBid();
//     }
//   }, [listingId, listing, contract]);

//   const fetchMinNextBid = async () => {
//     if (!listingId || !contract) return;

//     const { displayValue, symbol } = await contract.auction.getMinimumNextBid(
//       listingId
//     );
//     setMinimumNextBid({
//       displayValue: displayValue,
//       symbol: symbol,
//     });
//   };

//   const { mutate: buyNow } = useBuyNow(contract);

//   const buyNFT = async () => {
//     if (networkMismatch) {
//       switchNetwork && switchNetwork(network);
//       return;
//     }

//     if (!listingId || !contract || !listing) return;

//     await buyNow(
//       {
//         id: listingId,
//         buyAmount: 1, // quantity
//         type: listing.type,
//       },
//       {
//         onSuccess(data, variables, context) {
//           alert("NFT bought");
//           console.log("SUCCESS", data, variables, context);
//           router.replace("/");
//         },
//         onError(error, variables, context) {
//           alert("ERROR: NFT could not be bought");
//           console.log("ERROR", error, variables, context);
//         },
//       }
//     );
//   };

//   const createBidOrOffer = async () => {
//     try {
//       if (networkMismatch) {
//         switchNetwork && switchNetwork(network);
//         return;

//         //Direct listing
//         if (listing?.type === ListingType.Direct) {
//         }

//         //Auction listing
//         if (listing?.type === ListingType.Auction) {
//         }
//       }
//     } catch (error) {
//       console.error(error);
//     }
//   };

//   if (isLoading) {
//     return (
//       <div>
//         <Header />
//         <div>
//           <p className="text-center animate-pulse text-blue-500">
//             Loading Item ...
//           </p>
//         </div>
//       </div>
//     );
//   }

//   if (!listing) {
//     return (
//       <div>
//         <Header />
//         <div>
//           <p className="text-center animate-bounce text-blue-500">
//             Listing not found
//           </p>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div>
//       <Header />

//       <main className="max-w-6xl mx-auto p-2 flex flex-col lg:flex-row space-y-10 space-x-5 pr-10 ">
//         <div className="p-10 border mx-auto max-w-md ml-5 lg:mx-0 lg:max-w-xl ">
//           <MediaRenderer className="items-center" src={listing.asset.image} />
//         </div>

//         <section className="flex-1 space-y-5 pb-20 lg:pb-0 justify-center">
//           <div>
//             <h1 className="text-xl font-bold pb-2 capitalize">
//               {listing.asset.name}{" "}
//             </h1>
//             <p>{listing.asset.description} </p>
//             <p className="flex items-center text-xs pt-2 sm:text-base ">
//               <UserCircleIcon className="h-5" />
//               <span className="font-bold pr-3">Seller:</span>
//               {listing.sellerAddress}
//             </p>
//           </div>

//           <div className="grid grid-cols-2 items-center py-2">
//             <p className="font-bold "> Listing Type: </p>

//             <p className="pb-2">
//               {listing.type === ListingType.Direct
//                 ? "Direct Listing"
//                 : "Auction Listing"}
//             </p>

//             <p className="font-bold">Buy It Now Price:</p>

//             <p className="text-4xl font-bold pb-2">
//               {listing.buyoutCurrencyValuePerToken.displayValue}{" "}
//               {listing.buyoutCurrencyValuePerToken.symbol}
//             </p>

//             <button
//               onClick={buyNFT}
//               className="col-start-2 mt-2 bg-blue-600 font-bold text-white rounded-full w-44 py-4 px-10"
//             >
//               Buy Now
//             </button>
//           </div>

//           {/* if direct show offers here */}

//           <div className="grid grid-cols-2 space-y-2 items-center justify-end">
//             <hr className="col-span-2" />

//             <p className="col-span-2 font-bold">
//               {listing.type === ListingType.Direct
//                 ? "Make an offer"
//                 : "Bid on This Auction"}
//             </p>

//             {/* Remaining time on auction goes here */}

//             {listing.type === ListingType.Auction && (
//               <>
//                 <p>Current minimum Bid:</p>
//                 <p className="font-bold">
//                   {minimumNextBid?.displayValue}
//                   {minimumNextBid?.symbol}
//                 </p>
//                 <p>Time Remaining</p>
//                 <Countdown
//                   date={Number(listing.endTimeInEpochSeconds.toString()) * 1000}
//                 />
//               </>
//             )}

//             <input
//               className="border p-2 rounded-lg mr-5 outline-red-300"
//               type="text"
//               onChange={(e) => setBidAmount(e.target.value)}
//               placeholder={formatPlaceholder()}
//             />
//             <button
//               onClick={createBidOrOffer}
//               className="bg-red-600 font-bold text-white rounded-full w-44 py-4 px-10"
//             >
//               {listing.type === ListingType.Direct ? "Offer" : "Bid"}
//             </button>
//           </div>
//         </section>
//       </main>
//     </div>
//   );
// }

// export default ListingPage;